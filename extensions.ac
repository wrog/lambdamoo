
MOO_XT_DECLARE_EXTENSIONS([

##==================
%%extension unicode
##==================

  --enable-unicode=KWD,..
    %?- use original ASCII charset
    %?  support unicode

  %cdefine UNICODE_%s

  %option strings
    %alt strs
    %alt core
    %?  in STR values
  %option numbers
    %alt nums
    %?  in numeric constants
  %option identifiers
    %alt ids
    %?  in variable names
    %implies strs
  %option_set code = ids,nums
  %option_set all  = code,strs
  %option_set yes  = strs      # (annoy both Ken and wRog)

  XT_CSRCS = utf.c

  %require uclib
    --with-uclib=LIB,..
      %?   Unicode character data source.  Choices are
      %?*  gnu(=unistring), icu, ucd

    %cdefine UNICODE_DATA UD_%s

    %lib unistring GNU
      %alt gnu
      %ac AC_SEARCH_LIBS([unicode_character_name],[unistring],[[%%]])
    %lib icu
      %ac MOO_LIB_ICUUC([[%%]])
    %lib ucd
      %ac AC_SEARCH_LIBS([unicode_character_data],[ucd],[[%%]])
      %build
	--with-ucdpath=DIR
	  %?  use this libucd build for uclib

	%dirvar ucd_dir
	CPPFLAGS = -I$(ucd_dir)
	XT_LOBJS = $(ucd_dir)/libucd.a

	%make <<END_UCD_MAKE

$(ucd_dir)/libucd.a:
	$(MAKE) -C $(ucd_dir) libucd.a

$(ucd_dir)/ucd.h:
	$(MAKE) -C $(ucd_dir) ucd.h

utf-ctype.o: $(ucd_dir)/ucd.h

END_UCD_MAKE

##=================
%%extension regexp
##=================

  %require relib
    --with-relib=LIB,..
      %?  regular expressions (ylo,pcre)

    # yes, this is a hack:
    %ac_yes AS_IF([[$moo_xt_do_unicode]],[[%%=pcre]],[[%%=ylo]])

    %lib ylo
      XT_CSRCS = regexpr.c pattern_ylo.c
      XT_HDRS = regexpr.h
    %lib pcre
      XT_CSRCS = pattern_pcre.c
      %ac <<END
MOO_LIB_PCRE1([[%%]],
  [[%!="PCRE library not found (must be PCRE1, not PCRE2;
   use 'apt-get install libpcre3-dev' in Debian or Ubuntu;
   Fedora, Red Hat, MacOS homebrew all have 'pcre' packages)"]],
  [[%!="-lpcre cannot be used:  This PCRE1 library lacks
   either support for UTF-8 or for Unicode character properties.
   We need at least version 8."]])
END

])

# MOO_LIB_ICUUC( <IF-FOUND>, <IF-NOT-FOUND> )
#
AC_DEFUN([MOO_LIB_ICUUC],
[AC_CACHE_CHECK([[for icu being installed]],[moo_cv_icuuc_lib],[[
_moo_save_libs=$LIBS
moo_cv_icuuc_lib=
LIBS="-licuuc $_moo_save_libs"]
AC_LINK_IFELSE([AC_LANG_PROGRAM(
  [[@%:@include <unicode/uchar.h>]],
  [[UChar32 c; int j = u_charDigitValue(c);]])],[[
  moo_cv_icuuc_lib=yes
]],[[
  moo_cv_icuuc_lib=no
]])
LIBS=$_moo_save_libs])
AS_IF([[test "$moo_cv_icuuc_lib" = yes]],[[
  LIBS="-licuuc $LIBS"]
  $1],[$2])])

# MOO_LIB_PCRE1( <IF-FOUND>, <IF-NOT-FOUND>, <IF-BROKEN> )
#
AC_DEFUN([MOO_LIB_PCRE1],
[AC_CHECK_LIB([pcre], [pcre_exec], [
AC_CACHE_CHECK([[whether -lpcre was built with required features]],
  [moo_lib_cv_pcre_utf8],
[[_moo_save_libs=$LIBS
LIBS="-lpcre $LIBS"]
AC_RUN_IFELSE([AC_LANG_PROGRAM([[@%:@ include <pcre.h>]],[[
  int have_utf8, have_props;
  pcre_config(PCRE_CONFIG_UTF8, &have_utf8);
  pcre_config(PCRE_CONFIG_UNICODE_PROPERTIES, &have_props);
  return (have_utf8 && have_props) ? 0 : 1;
]])], [[moo_lib_cv_pcre_utf8=yes]], [[moo_lib_cv_pcre_utf8=no]])[
LIBS=$_moo_save_libs]])
AS_IF([[test $moo_lib_cv_pcre_utf8 = yes]],[[
  LIBS="-lpcre $LIBS"]
  $1], [$3])], [[moo_lib_cv_pcre_utf8=no]
$2])])
